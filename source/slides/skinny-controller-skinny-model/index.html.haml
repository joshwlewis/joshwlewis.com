---
title: Skinny Controller, Skinny Model
published: true
description: 'Skinny Controller, Fat Model' is an old Rails mantra, but a
  poor goal, an anti-pattern, and an easy trap to fall into. There is a better
  way...
---

= step :title do
  %h1.display-4.mb-2
    Skinny Controller,
    %br
    Skinny Model
  %br
  %h4
    %a{ href: "//twitter.com/joshwlewis" } @joshwlewis
    = " - "
    %a{ href: '//twitter.com/heroku.com' } @heroku
  %br
  %h4
    %a{ href: '//joshwlewis.com/slides/skinny-controller-skinny-model' }
      joshwlewis.com/slides/skinny-controller-skinny-model

= step :outline, x: 2000 do
  %h1.mb-2 üëã  I'm Josh.
  %h2.mb-2
    Today, we'll cover:
  %ul
    %li.h4 Memes
    %li.h4 Iterative refactoring
    %li.h4 Pitfalls of "Fat Controller"
    %li.h4 Origin (and promise) of "Skinny Controller, Fat Model"
    %li.h4 Traps hidden in "Fat Model"
    %li.h4 One weird trick to avoid "Fat Model" and "Fat Controller"
    %li.h4 Tips to use the trick successfully

= step :demo_time, x: 4000 do
  %div.text-center
    %img.mb-3{height: "300px", src: "/images/memeify_all-the-things.jpg", alt: "Memeify all the things"}

    %h1.mb-2.display-4 Memefab
    %h2
      %a.h2{href: 'https://memefab.herokuapp.com'}
        memefab.herokuapp.com
    %h2
      %a{href: 'https://github.com/heroku/memefab'}
        github.com/heroku/memefab

= step :cowboy, x: 6000 do
  %div.text-center
    %h1.display-1.mb-2 üê¥ü§†üêÆ
    %h2.display-4 Pew Pew Pew!
    %h2.display-4 I'm a Cowboy!

= step :fat_controller, x: 8000 do
  %h1 The Fat Controller
  = code "ruby" do
    :plain
      class MemesController < ApplicationController
        def create
          @meme = Meme.new(meme_params)
          @meme.upload_id = SecureRandom.uuid

          begin
            memeified = memeify(@meme.image, @meme.top, @meme.bottom)
            Cloud.upload(memefied, @meme.upload_id)
          rescue
            @meme.errors.add(:base, "Meme creation failed")
          end

          if @meme.valid? && @meme.save
            Twitter.update(url_for(@meme)) rescue nil
            flash[:notice] = "Successfully fabricated a fabulous meme."
            redirect_to @meme
          else
            Cloud.destroy(@meme.upload_id)
            render :edit
          end
        end

        private

        def memeify; redacted; end
        def meme_params; redacted; end
      end

= step :skinny_model, x: 10000 do
  %h2 The Skinny Model
  = code "ruby" do
    :plain
      class Meme < ApplicationRecord
        belongs_to :image
        validates_presence_of :image
        validates_length_of :top, :bottom, maximum: 50
      end

= step :fat_controller_skinny_model, x: 12000 do
  %h1.mb-2 Fat Controller, Skinny Model
  %ul.list-unstyled
    %li.h3 üëç Model is only concerned with it's data
    %li.h3 üëé Controller has mixed concerns
    %li.h3 üëé Business logic is not reusable
    %li.h3 üëé Business logic can not be unit tested
    %li.h3 üëé Controller is tightly coupled

= step :history, x: 14000 do
  %blockquote.blockquote.mb-2
    %h1.mb-1 Skinny Controller, Fat Model
    %h3.text-muted
      :plain
        - Jamis Buck, 2006

  %a.h4{href: 'http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model'}
    weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model

= step :skinny_controller, x: 16000 do
  %h1 The Skinny Controller
  = code "ruby" do
    :plain
      class MemesController < ApplicationController
        def create
          @meme = Meme.new(meme_params)

          if @meme.save
            flash[:notice] = "Successfully fabricated a fabulous meme."
            redirect_to @meme
          else
            render :edit
          end
        end

        def meme_params; redacted; end
      end

= step :fat_model, x: 18000 do
  %h1 The Fat Model
  = code "ruby" do
    :plain
      class Meme < ApplicationRecord
        include Rails.application.routes.url_helpers

        before_validation :memeify_and_upload, on: :create
        after_create :post_to_twitter

        def memeify_and_upload
          self.upload_id = SecureRandom.uuid
          begin
            memeified_image = memeify(image, top, bottom)
            Cloud.upload(memeified_image, upload_id)
          rescue CloudError
            errors.add(:base, "Meme creation failed")
            Cloud.destroy(upload_id)
          end
        end

        def post_to_twitter
          Twitter.update(url_for(self))
        rescue TwitterError
          nil
        end
      end

= step :skinny_controller_fat_model, x: 20000 do
  %h1.mb-2 Skinny Controller, Fat Model
  %ul.list-unstyled
    %li.h3 üëç Controller is only concerned with serving requests
    %li.h3 üëç Business logic can be reused
    %li.h3 üëç Business logic may be unit tested
    %li.h3 üëé Model has mixed concerns
    %li.h3 üëé Model is tightly coupled
    %li.h3 üëé Order of operations is unclear
    %li.h3 üëé Surprising API

= step :its_a_trap, x: 22000 do
  %div.text-center
    %img{src: "/images/fat-models_its-a-trap.jpg", alt: "it's a trap"}

= step :where_does_business_logic_go, x: 24000 do
  %h1.mb-2 Business logic goes where?
  %ul.list-unstyled
    %li.h2 üôà Model
    %li.h2 üôâ View
    %li.h2 üôä Controller
    %li.h2 ü§î Something Else...

= step :mediator_pattern, x: 26000 do
  %h2 The Mediator Pattern
  %blockquote.blockquote
    %p
      With the mediator pattern, communication between objects is encapsulated
      with a mediator object. Objects no longer communicate directly with each
      other, but instead communicate through the mediator. This reduces the
      dependencies between communicating objects, thereby lowering the coupling.

= step :installation, x: 28000 do
  %h1 No Installation

  %pre.highlight
    %code.text-strikethrough
      $ gem install mediators

  %h1 Just plain ol' Ruby
  = code "bash" do
    :plain
      $ mkdir app/mediators
  = code "ruby" do
    :plain
      # app/mediators/application_mediator.rb
      class ApplicationMediator
        def self.run(*args)
          new(*args).call
        end
      end

= step :fat_mediator, x: 30000 do
  %h1 The Fat Mediator
  = code "ruby" do
    :plain
      class MemeFabricator < ApplicationMediator
        def initialize(attrs = {}, model: Meme, uploader: Cloud, twitter: Twitter)
          @attrs, @model, @uploader, @twitter = attrs, model, uploader, twitter
        end

        def call
          memeify_image
          upload_image
          save_record
          post_to_twitter
          meme
        end

        def meme
          @meme ||= model.new(attributes.merge(upload_id: upload_id))
        end

        private

        attr_reader :attributes, :model, :uploader, :twitter

        def upload_id
          @upload_id ||= SecureRandom.uuid
        end

        def memeify_image
          @memefied ||= memeify(image, top, bottom)
        rescue StandardError
          meme.errors.add(:base, "Error captioning meme")
          raise FailedMediator
        end

        def upload_image
          uploader.upload(@memefied, upload_id)
        rescue
          meme.errors.add(:base, "Error uploading meme to cloud")
          raise FailedMediator
        end

        def save_record
          meme.save!
        rescue
          uploader.destroy(upload_id)
          raise FailedMediator
        end

        def post_to_twitter
          twitter.update(url_for(meme))
        rescue
          nil
        end
      end

= step :skinny_controller_fat_mediator, x: 32000 do
  %h1 Skinny Controller, Fat Mediator
  = code "ruby" do
    :plain
      class MemesController < ApplicationController
        def create
          creator = MemeFabricator.new(meme_params)
          @meme = creator.meme
          creator.call
          flash[:notice] = "Successfully fabricated a fabulous meme."
          redirect_to @meme
        rescue
          render :edit
        end

        def meme_params; redacted; end
      end

= step :skinny_model_fat_mediator, x: 34000 do
  %h1 Skinny Model, Fat Mediator
  = code "ruby" do
    :plain
      class Meme < ApplicationRecord
        belongs_to :image
        validates_presence_of :image
        validates_length_of :top, :bottom, maximum: 50
      end

= step :trusty_methods, x: 36000 do
  %h1 A trusty API for business logic
  = code "ruby" do
    :plain
      # With fat model, you get unexpected side-effects
      Image.create({ upload_id: 123, meme_attributes: { top: "surprise!" })
      Image.last.build_meme(bottom: "you just posted to twitter").save
      Meme.find_or_create_by(top: "scary üòß")

      # With fat mediator, you choose when to execute side effects
      Meme.create(top: "trusty method call", bottom: "didnt tweet üôå")
      MemeFabricator.run(top: "my mediators", bottom: "bring the tweeps to the yard")

= step :high_level_documentation, x: 38000 do
  %h1 High-level functionality documentation
  = code "bash" do
    :plain
      # With fat model, you understand only data.
      $ ls /app/models
      image.rb
      meme.rb

      # with fat mediator, you understand actions, too.
      $ ls /app/mediators
      image_uploader.rb
      meme_fabricator.rb


= step :low_level_documentation, x: 40000 do
  %h1 Low-level functionality documentation
  = code "ruby" do
    :plain
      # Actions to take and the order aren't immediately obvious
      class Meme < ApplicationRecord
        before_validation :memeify_and_upload, on: :create
        after_create :post_to_twitter
      end
  = code "ruby" do
    :plain
      # Actions to take and the order are immediately obvious
      class MemeFabricator < ApplicationMediator
        # ...

        def call
          memeify_image
          upload_image
          save_record
          post_to_twitter
          meme
        end

        # ...
      end

= step :simplifies_unit_testing, x: 42000 do
  %h1 Simplified Unit Testing
  = code "ruby" do
    :plain
      # With fat model, constants must be stubbed to mock
      test "uploads to cloud" do
        uploader = Minitest::Mock.new
        uploader.expect(:call, nil, [String])
        Cloud.stub(:upload, uploader) do
          Meme.create(top: "stubbed constant", bottom: "with a mock")
        end
        assert mock.verify
      end

      # With fat mediator, pass in mocks as dependencies
      test "uploads to cloud" do
        uploader = Minitest::Mock.new
        uploader.expect(:upload, nil, [String])
        MemeFabricator.run(top: "just a", bottom: "mock", uploader: uploader)
        assert uploader.verify
      end

= step :skinny_controller_skinny_model_fat_mediator, x: 44000 do
  %h1.mb-2 Skinny Controller, Skinny Model, Fat Mediator
  %ul.list-unstyled
    %li.h3 üëç Controller is only concerned with serving requests
    %li.h3 üëç Model is only concerned with it's data
    %li.h3 üëç Business logic may be reused
    %li.h3 üëç Business logic may be tested independently
    %li.h3 üëç Order of operations is clear
    %li.h3 üëç API is unsurprising
    %li.h3 üëé Net lines of code increased

= step :we_need_a_job, x: 46000 do
  %img{src: "/images/yes-please-post-to-twitter_ill-wait.jpg", alt: "Yes, please post to twitter; I'll wait"}

= step :fat_mediator_skinny_job, x: 48000 do
  %h1 Fat Mediator, Skinny Job
  = code "ruby" do
    :plain
      class MemeFabricator < ApplicationMediator
        # ...
        def post_to_twitter
          TweetMeme.perform_later(meme.id)
        end
        # ...
      end

      class TweetMeme < ApplicationJob
        include Rails.application.routes.url_helpers
        def perform(meme_id:)
          meme = Meme.find_by_id(meme_id)
          if meme
            url = url_for(meme)
            Twitter.update(url)
          end
        end
      end

= step :job_vs_mediator, x: 50000 do
  %div.container
    %div.row.mb-2
      %h1 Mediators and Jobs
      %h2 Similar...
      = code "ruby" do
        :plain
          # Same result for both
          FooJob.perform_now(some_arguments)
          FooMediator.run(some_arguments)

    %div.row
      %h2 But not equal...
      %div.col-md-6
        %h3 Jobs (like controllers):
        %ul
          %li (de)serialize arguments
          %li accept outside inputs
          %li must maintain backwards compatibility
      %div.col-md-6
        %h3 Mediators:
        %ul
          %li accept any arguments
          %li have internal-only contracts
          %li must only maintain current compatibility

= step :call_from_anywhere, x: 52000 do
  %div.container
    %div.row.mb-3
      %img{height: '350px', src: "/images/jobs-and-mediators_why-not-both.jpg"}
    %div.row
      %h2 Mediators are the internal API.
      %h2.mb-1 Consume them from external APIs:
      %ul
        %li Controllers
        %li Jobs
        %li Rake tasks
        %li Scripts
        %li Console

= step :fat_mediator_skinny_job_skinny_mediator, x: 54000 do
  %h1 Fat Mediator, Skinny Job, Skinny Mediator
  = code "ruby" do
    :plain
      class TweetMeme < ApplicationJob
        def perform(meme_id:)
          meme = Meme.find_by_id(meme_id)
          MemeTweeter.run(meme) if meme
        end
      end

      class MemeTweeter < ApplicationMediator
        def initialize(meme:, twitter: Twitter, url_for: nil)
          @meme, @twitter = meme, twitter
          @url_for = url_for || Rails.application.routes.url_helpers.method(:url_for)
        end

        def call
          url = url_for(meme)
          twitter.update(url)
        end

        private

        attr_reader :meme, :twitter, :url_for
      end

= step :the_pattern, x: 56000 do
  %h3 For the design pattern aficionado:
  = code "bash" do
    :plain
      $ ls app/commands
      tachyon_shifter.rb
      axionic_deflector.rb

  %h3 For the Rails community follower:
  = code "bash" do
    :plain
      $ ls app/services
      pulse_inhibitor.rb
      resonance_manipulator.rb

  %h3 For the Ruby purist:
  = code "bash" do
    :plain
      $ ls lib/
      hyperwave_pulse_injector.rb
      nitrogen_synthesizer.rb

= step :plain_ruby, x: 58000 do
  %div.text-center
    %img{src: "/images/plain-ruby_save-you-it-will.jpg", alt: "Plain Ruby, save you it will."}

= step :resources, x: 60000 do
  %h1.mb-2 Thanks! üôÇ

  %dl.h4
    %dt This presentation
    %dd.mb-1
      %a{href: "/slides/skinny-controller-skinny-model"}
        joshwlewis.com/slides/skinny-controller-skinny-model
    %dt Memefab source on GitHub
    %dd.mb-1
      %a{href: "https://github.com/heroku/memefab"}
        github.com/heroku/memefab
    %dt Memefab app on Heroku
    %dd.mb-1
      %a{href: "https://memefab.herokuapp.com"}
        memefab.herokuapp.com
    %dt Pliny, a Sinatra framework with mediator support
    %dd.mb-1
      %a{href: "https://github.com/interagent/pliny"}
        github.com/interagent/pliny
